{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport { format } from \"date-fns\";\nexport class MessagesService {\n  constructor(rootStore, messagesStore) {\n    this.rootStore = rootStore;\n    this.messagesStore = messagesStore;\n    this.messageApi = void 0;\n    this.textareaValue = '';\n    this.userId = 0;\n    this.chatId = 0;\n    this.lastMessageDate = '';\n    this.messageApi = rootStore.api.messageApi;\n    makeAutoObservable(this, {}, {\n      autoBind: true\n    });\n  }\n  setUserId(id) {\n    this.userId = id;\n  }\n  setChatId(id) {\n    this.chatId = id;\n  }\n  setList(messages) {\n    this.messagesStore.list = messages;\n  }\n  handleChangeTextareaValue(e) {\n    this.textareaValue = e.target.value;\n  }\n  async initMessageList() {\n    const list = await this.messageApi.search();\n    this.messagesStore.list = list;\n  }\n  async handleSendBoxClick() {\n    const newMessage = {\n      title: this.textareaValue,\n      userId: this.userId,\n      chatId: this.chatId\n    };\n    this.textareaValue = '';\n    await this.messageApi.create(newMessage);\n    this.initMessageList();\n  }\n  formatDate(date) {\n    const formattedDate = format(new Date(date), 'dd MMMM yyyy ����');\n    if (formattedDate !== this.lastMessageDate) {\n      this.lastMessageDate = formattedDate;\n      return formattedDate;\n    }\n    return undefined;\n  }\n  formatTime(date) {\n    return format(new Date(date), 'HH:mm');\n  }\n}","map":{"version":3,"names":["makeAutoObservable","format","MessagesService","constructor","rootStore","messagesStore","messageApi","textareaValue","userId","chatId","lastMessageDate","api","autoBind","setUserId","id","setChatId","setList","messages","list","handleChangeTextareaValue","e","target","value","initMessageList","search","handleSendBoxClick","newMessage","title","create","formatDate","date","formattedDate","Date","undefined","formatTime"],"sources":["D:/messager/client/src/components/messages.service.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { RootStore } from \"../store/root.store\";\r\nimport { MessagesStore } from \"./messages.store\";\r\nimport { MessageApi } from \"../api/entities/message/message.api\";\r\nimport { MessageSchema } from \"../api/entities/message/message.types\";\r\nimport { format } from \"date-fns\";\r\n\r\nexport class MessagesService {\r\n    private readonly messageApi: MessageApi\r\n\r\n    public textareaValue: string = ''\r\n\r\n    public userId: number = 0\r\n\r\n    public chatId: number = 0\r\n\r\n    public lastMessageDate: string = ''\r\n\r\n    constructor(private readonly rootStore: RootStore, private readonly messagesStore: MessagesStore) {\r\n        this.messageApi = rootStore.api.messageApi\r\n        makeAutoObservable(this, {}, {autoBind: true})\r\n    }\r\n\r\n    setUserId(id: number) {\r\n        this.userId = id\r\n    }\r\n\r\n    setChatId(id: number) {\r\n        this.chatId = id\r\n    }\r\n\r\n    setList(messages: MessageSchema[]) {\r\n        this.messagesStore.list = messages\r\n    }\r\n\r\n    handleChangeTextareaValue(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        this.textareaValue = e.target.value\r\n    }\r\n\r\n    async initMessageList() {\r\n        const list = await this.messageApi.search()\r\n        this.messagesStore.list = list\r\n    }\r\n\r\n    async handleSendBoxClick() {\r\n        const newMessage = {\r\n            title: this.textareaValue,\r\n            userId: this.userId,\r\n            chatId: this.chatId\r\n        }\r\n    \r\n        this.textareaValue = ''\r\n        await this.messageApi.create(newMessage)\r\n        this.initMessageList()\r\n    }\r\n\r\n    formatDate(date: string) {\r\n        const formattedDate = format(new Date(date), 'dd MMMM yyyy ����')\r\n        if (formattedDate !== this.lastMessageDate) {\r\n            this.lastMessageDate = formattedDate\r\n            return formattedDate\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    formatTime(date: string) {\r\n        return format(new Date(date), 'HH:mm')\r\n    }\r\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAKzC,SAASC,MAAM,QAAQ,UAAU;AAEjC,OAAO,MAAMC,eAAe,CAAC;EAWzBC,WAAWA,CAAkBC,SAAoB,EAAmBC,aAA4B,EAAE;IAAA,KAArED,SAAoB,GAApBA,SAAoB;IAAA,KAAmBC,aAA4B,GAA5BA,aAA4B;IAAA,KAV/EC,UAAU;IAAA,KAEpBC,aAAa,GAAW,EAAE;IAAA,KAE1BC,MAAM,GAAW,CAAC;IAAA,KAElBC,MAAM,GAAW,CAAC;IAAA,KAElBC,eAAe,GAAW,EAAE;IAG/B,IAAI,CAACJ,UAAU,GAAGF,SAAS,CAACO,GAAG,CAACL,UAAU;IAC1CN,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;MAACY,QAAQ,EAAE;IAAI,CAAC,CAAC;EAClD;EAEAC,SAASA,CAACC,EAAU,EAAE;IAClB,IAAI,CAACN,MAAM,GAAGM,EAAE;EACpB;EAEAC,SAASA,CAACD,EAAU,EAAE;IAClB,IAAI,CAACL,MAAM,GAAGK,EAAE;EACpB;EAEAE,OAAOA,CAACC,QAAyB,EAAE;IAC/B,IAAI,CAACZ,aAAa,CAACa,IAAI,GAAGD,QAAQ;EACtC;EAEAE,yBAAyBA,CAACC,CAAyC,EAAE;IACjE,IAAI,CAACb,aAAa,GAAGa,CAAC,CAACC,MAAM,CAACC,KAAK;EACvC;EAEA,MAAMC,eAAeA,CAAA,EAAG;IACpB,MAAML,IAAI,GAAG,MAAM,IAAI,CAACZ,UAAU,CAACkB,MAAM,CAAC,CAAC;IAC3C,IAAI,CAACnB,aAAa,CAACa,IAAI,GAAGA,IAAI;EAClC;EAEA,MAAMO,kBAAkBA,CAAA,EAAG;IACvB,MAAMC,UAAU,GAAG;MACfC,KAAK,EAAE,IAAI,CAACpB,aAAa;MACzBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,MAAM,EAAE,IAAI,CAACA;IACjB,CAAC;IAED,IAAI,CAACF,aAAa,GAAG,EAAE;IACvB,MAAM,IAAI,CAACD,UAAU,CAACsB,MAAM,CAACF,UAAU,CAAC;IACxC,IAAI,CAACH,eAAe,CAAC,CAAC;EAC1B;EAEAM,UAAUA,CAACC,IAAY,EAAE;IACrB,MAAMC,aAAa,GAAG9B,MAAM,CAAC,IAAI+B,IAAI,CAACF,IAAI,CAAC,EAAE,mBAAmB,CAAC;IACjE,IAAIC,aAAa,KAAK,IAAI,CAACrB,eAAe,EAAE;MACxC,IAAI,CAACA,eAAe,GAAGqB,aAAa;MACpC,OAAOA,aAAa;IACxB;IACA,OAAOE,SAAS;EACpB;EAEAC,UAAUA,CAACJ,IAAY,EAAE;IACrB,OAAO7B,MAAM,CAAC,IAAI+B,IAAI,CAACF,IAAI,CAAC,EAAE,OAAO,CAAC;EAC1C;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}